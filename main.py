from collections import defaultdict
import re
import logging
import uuid
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

# ===== Logging Setup =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "7890244767:AAE4HRfDjhyLce4feEaK_YCgFaJbVHi_2nA"
OWNER_ID = 8028396521   # ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ Numeric Telegram ID ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶æ‡¶ì

# ===== Data Store =====
USERS = defaultdict(lambda: {"balance": 0})
CLAIMS = {}  # claim_id -> {user_id, amount}

# ===== Menus =====
main_menu = ReplyKeyboardMarkup(
    [
        ["üè¶ Accounts Sell", "üí¨ Support Group"],
        ["üí∞ My Balance", "‚úÖ Withdraw"],
    ],
    resize_keyboard=True
)

sell_menu = ReplyKeyboardMarkup(
    [
        ["üì® Telegram", "üìû WhatsApp"],
        ["‚¨ÖÔ∏è Back"],
    ],
    resize_keyboard=True
)

back_only = ReplyKeyboardMarkup([["‚¨ÖÔ∏è Back"]], resize_keyboard=True)

withdraw_menu = ReplyKeyboardMarkup(
    [
        ["üì≤ Bkash", "üí≥ Nagad"],
        ["‚¨ÖÔ∏è Back"],
    ],
    resize_keyboard=True
)

# ===== States =====
CHOOSE_PLATFORM, ASK_NUMBER, ASK_CODE = range(3)
WD_METHOD, WD_NUMBER = range(3, 5)

# ===== Phone Validation =====
def is_valid_phone(number: str) -> bool:
    pattern = r'^\+\d{7,15}$'
    return re.match(pattern, number) is not None

# ===== /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info("User %s (%s) started the bot.", user.first_name, user.id)
    USERS[user.id]
    await update.message.reply_text("‚ú® Welcome! Choose an option:", reply_markup=main_menu)

# ===== Static =====
async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    bal = USERS[user.id]["balance"]
    await update.message.reply_text(f"üí∞ Balance: {bal}‡ß≥")

async def support_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí¨ Support Group: https://t.me/love_ie_fake ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá Send Message ‡¶è ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®!")

# ===== Accounts Sell Flow =====
async def sell_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:", reply_markup=sell_menu)
    return CHOOSE_PLATFORM

async def choose_platform(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üì® Telegram":
        context.user_data["platform"] = "Telegram"
    elif text == "üìû WhatsApp":
        context.user_data["platform"] = "WhatsApp"
    elif text == "‚¨ÖÔ∏è Back":
        await update.message.reply_text("‚¨ÖÔ∏è Main Menu", reply_markup=main_menu)
        return ConversationHandler.END
    else:
        await update.message.reply_text("‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:", reply_markup=sell_menu)
        return CHOOSE_PLATFORM

    await update.message.reply_text("üì≤ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Account Number ‡¶¶‡¶ø‡¶®:", reply_markup=back_only)
    return ASK_NUMBER

async def ask_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è Back":
        await update.message.reply_text("‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:", reply_markup=sell_menu)
        return CHOOSE_PLATFORM

    number = update.message.text.strip()
    if len(number) < 5:
        await update.message.reply_text("‚ùå ‡¶¨‡ßà‡¶ß Account Number ‡¶¶‡¶ø‡¶®:", reply_markup=back_only)
        return ASK_NUMBER

    context.user_data["acc_number"] = number
    await update.message.reply_text("Send OTP:", reply_markup=back_only)
    return ASK_CODE

async def complete_sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚¨ÖÔ∏è Back":
        return await sell_entry(update, context)

    code = update.message.text.strip()
    if not code.isdigit():
        await update.message.reply_text("‚ùå Code ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá!", reply_markup=back_only)
        return ASK_CODE

    platform = context.user_data.get("platform")
    number = context.user_data.get("acc_number")
    user = update.effective_user

    # Send request to admin
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ Approve", callback_data=f"sell_approve_{user.id}")],
            [InlineKeyboardButton("‚ùå Reject", callback_data=f"sell_reject_{user.id}")]
        ]
    )
    msg = (
        "üõí Sell Request\n\n"
        f"üë§ User: {user.first_name} ({user.id})\n"
        f"üóÇ Platform: {platform}\n"
        f"üì≤ Account: {number}\n"
        f"üîë Code: {code}"
    )
    await context.bot.send_message(chat_id=OWNER_ID, text=msg, reply_markup=keyboard)

    await update.message.reply_text(
        "üîÉ Processing your request...‡•§\n\nüëâ ‡¶®‡¶§‡ßÅ‡¶® Account ‡¶¶‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‚¨ÖÔ∏è Back ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§",
        reply_markup=back_only
    )
    return ASK_NUMBER

# ===== Withdraw Flow =====
async def withdraw_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    bal = USERS[user.id]["balance"]

    if bal < 100:
        await update.message.reply_text("‚ö†Ô∏è ‡¶Æ‡¶ø‡¶®‡¶ø‡¶Æ‡¶æ‡¶Æ 100‡ß≥ ‡¶π‡¶≤‡ßá withdraw ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§")
        return ConversationHandler.END
    await update.message.reply_text("Withdraw Method ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=withdraw_menu)
    return WD_METHOD

async def choose_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚¨ÖÔ∏è Back":
        return await start(update, context)
    if text not in ("üì≤ Bkash", "üí≥ Nagad"):
        await update.message.reply_text("‡¶â‡¶™‡¶∞‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡ßá‡¶•‡¶° ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:", reply_markup=withdraw_menu)
        return WD_METHOD

    context.user_data["wd_method"] = text.replace("üì≤ ", "").replace("üí≥ ", "")
    await update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶® (+880... format):", reply_markup=back_only)
    return WD_NUMBER

async def take_withdraw_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    number = update.message.text.strip()
    user = update.effective_user

    if number == "‚¨ÖÔ∏è Back":
        return await withdraw_entry(update, context)
    if not is_valid_phone(number):
        await update.message.reply_text("‚ùå ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®! Format: +CountryCodeXXXXXXXX")
        return WD_NUMBER

    bal = USERS[user.id]["balance"]
    method = context.user_data.get("wd_method")

    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ Approve", callback_data=f"wd_approve_{user.id}")],
            [InlineKeyboardButton("‚ùå Reject", callback_data=f"wd_reject_{user.id}")]
        ]
    )
    msg = (
        "üì• Withdraw Request\n\n"
        f"üë§ User: {user.first_name} ({user.id})\n"
        f"üí∞ Balance: {bal}‡ß≥\n"
        f"üí≥ Method: {method}\n"
        f"üì≤ Number: {number}"
    )
    await context.bot.send_message(chat_id=OWNER_ID, text=msg, reply_markup=keyboard)
    await update.message.reply_text("üîÉ Withdraw Request Pending...", reply_markup=main_menu)
    return ConversationHandler.END

# ===== Admin Callbacks =====
async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_")
    category, action, user_id = data[0], data[1], int(data[2])

    if category == "sell":
        if action == "approve":
            # unique claim_id ‡¶¨‡¶æ‡¶®‡¶æ‡¶ì
            claim_id = str(uuid.uuid4())
            CLAIMS[claim_id] = {"user_id": user_id, "amount": 20}

            # user notify
            await context.bot.send_message(
                chat_id=user_id,
                text=(
                    f"‚úÖ Account Sell Successful!\n\n"
                    f"üí∞ Claim ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®:"
                ),
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üéÅ Claim 20‡ß≥", callback_data=f"claim_{user_id}_{claim_id}")]]
                )
            )
            await query.edit_message_text("‚úÖ Approved & User Notified.")
        else:
            # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡¶∏‡¶∏‡¶π ‡¶∞‡¶ø‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
            message = query.message.text
            details = "\n".join(message.split("\n")[2:]) if message else ""

            await context.bot.send_message(
                chat_id=user_id,
                text=(
                    f"‚ùå Account Sell Rejected!\n\n"
                    f"{details}\n\n"
                    f"‚ö†Ô∏è ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ Support Group ‡¶è ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
                )
            )
            await query.edit_message_text("‚ùå Rejected & User Notified.")

    elif category == "wd":
        if action == "approve":
            USERS[user_id]["balance"] = 0
            await context.bot.send_message(chat_id=user_id, text="‚úÖ Withdraw Successful!\nüí∞ Balance: 0‡ß≥")
            await query.edit_message_text("‚úÖ Withdraw Approved & User Notified.")
        else:
            await context.bot.send_message(chat_id=user_id, text="‚ùå Withdraw Fail.")
            await query.edit_message_text("‚ùå Withdraw Rejected & User Notified.")

# ===== Claim Callback =====
async def claim_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    _, user_id, claim_id = query.data.split("_")
    user_id = int(user_id)

    claim = CLAIMS.pop(claim_id, None)
    if not claim or claim["user_id"] != user_id:
        await query.edit_message_text("‚ö†Ô∏è Already Claimed or Invalid Claim.")
        return

    USERS[user_id]["balance"] += claim["amount"]
    bal = USERS[user_id]["balance"]

    # Remove only that button
    old_keyboard = query.message.reply_markup.inline_keyboard if query.message.reply_markup else []
    new_keyboard = []
    for row in old_keyboard:
        new_row = [btn for btn in row if btn.callback_data != query.data]
        if new_row:
            new_keyboard.append(new_row)

    await query.edit_message_reply_markup(
        reply_markup=InlineKeyboardMarkup(new_keyboard) if new_keyboard else None
    )

    await context.bot.send_message(
        chat_id=user_id,
        text=f"üéÅ {claim['amount']}‡ß≥ Claim ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\nüí∞ ‡¶®‡¶§‡ßÅ‡¶® Balance: {bal}‡ß≥"
    )

# ===== Build app =====
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^üí∞ My Balance$"), show_balance))
    app.add_handler(MessageHandler(filters.Regex("^üí¨ Support Group$"), support_group))

    # Sell Flow
    sell_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üè¶ Accounts Sell$"), sell_entry)],
        states={
            CHOOSE_PLATFORM: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_platform)],
            ASK_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_code)],
            ASK_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, complete_sell)],
        },
        fallbacks=[MessageHandler(filters.Regex("^‚¨ÖÔ∏è Back$"), sell_entry)],
    )
    app.add_handler(sell_conv)

    # Withdraw Flow
    wd_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚úÖ Withdraw$"), withdraw_entry)],
        states={
            WD_METHOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_method)],
            WD_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, take_withdraw_number)],
        },
        fallbacks=[MessageHandler(filters.Regex("^‚¨ÖÔ∏è Back$"), withdraw_entry)],
    )
    app.add_handler(wd_conv)

    # Admin Approve/Reject
    app.add_handler(CallbackQueryHandler(admin_callback, pattern="^(sell|wd)_"))

    # Claim ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ
    app.add_handler(CallbackQueryHandler(claim_callback, pattern="^claim_"))

    logger.info("Bot started polling...")
    app.run_polling()

if __name__ == "__main__":
    main()
